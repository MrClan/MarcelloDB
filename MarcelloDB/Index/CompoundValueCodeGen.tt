<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System.Collections.Generic;

namespace MarcelloDB.Index
{
<#
    int maxCompoundLength = 8;
    for (int i = 2; i<=maxCompoundLength; i++)
	{
		var genericAttributes = new List<string>();
		var paramsDeclarations = new List<string>();
		var paramsAsParams = new List<string>();
		var propDeclarations = new List<string>();
		var propAssignments = new List<string>();
		var propsAsParams = new List<string>();

		var arguments = new List<string>();
		for (int j = 1; j<=i; j++)
		{
			var nr = j.ToString();
			genericAttributes.Add("T" + nr);
			paramsDeclarations.Add("T" + j.ToString() + " p" + j.ToString());
			propDeclarations.Add("public T" + nr + " P" + nr + "{ get; set; }");
			propAssignments.Add("this.P" + nr + " = p" + nr + ";");
			paramsAsParams.Add("p" + nr);
			propsAsParams.Add("this.P" + nr);
			arguments.Add("val" + nr);
		}

		var genericAttributeList = string.Join(", ", genericAttributes);
		var propDeclarationList = string.Join(" ", propDeclarations);
		var paramsDeclarationList = string.Join(", ", paramsDeclarations);
		var paramsAsParamsList = string.Join(", ", paramsAsParams);
		var propAssignmentList = string.Join(" ", propAssignments);
		var propsAsParamsList = string.Join(", ", propsAsParams);
		#>

	public class CompoundValue<<#=genericAttributeList#>> : CompoundValue{

		<#=  propDeclarationList #>

        internal CompoundValue(){}

        internal CompoundValue(<#=paramsDeclarationList#>){
        	<#=propAssignmentList#>
        }

        internal override IEnumerable<object> GetValues()
        {
            return new object[]{ <#=propsAsParamsList#> };
        }
    }

    public abstract partial class CompoundValue {
		internal static CompoundValue<<#=genericAttributeList#>> Build<<#=genericAttributeList#>>(<#=paramsDeclarationList#>)
        {
            return new CompoundValue<<#=genericAttributeList#>>(<#=paramsAsParamsList#>);
        }
    }
		<#
	}

	#>
}