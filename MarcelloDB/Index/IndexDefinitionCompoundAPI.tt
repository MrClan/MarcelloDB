<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using MarcelloDB.Collections;
using System.Runtime.CompilerServices;
using System.Linq;
using System;

namespace MarcelloDB.Index
{
    public partial class IndexDefinition<T>
    {
<#
        int maxCompoundLength = 8;
        for (int compoundLength = 2; compoundLength <= maxCompoundLength; compoundLength++)
        {
            var genericAttributes = new List<string>();
            var arguments = new List<string>();
            var compoundConstructorParams = new List<string>();
            for (int genericArgNr = 1; genericArgNr <= compoundLength; genericArgNr++)
            {
                var nr = genericArgNr.ToString();
                genericAttributes.Add("TAtt" + nr);
                arguments.Add("TAtt" + nr + " p" + nr);
                compoundConstructorParams.Add("p" + nr);
            }

            var genericAttributeList = string.Join(", ", genericAttributes);
            var argumentsList = string.Join(",", arguments);
            var compoundConstructorParamsList = string.Join(",", compoundConstructorParams);
#>
        protected IndexedValue<T, <#=genericAttributeList#>> IndexedValue<<#=genericAttributeList#>>
            (Func<T, CompoundValue<<#=genericAttributeList#>>> valueFunc, [CallerMemberName] string callerMember = "")
        {
            if (this.Building)
            {
                return new IndexedValue<T, <#=genericAttributeList#>>(valueFunc);
            }
            else
            {
                return (IndexedValue<T, <#=genericAttributeList#>>)IndexedValues.First(v => v.PropertyName == callerMember);
            }
        }
	    protected CompoundValue<<#=genericAttributeList#>> CompoundValue<<#=genericAttributeList#>>(<#=argumentsList#>)
	    {
	    	return new CompoundValue<<#=genericAttributeList#>>(<#=compoundConstructorParamsList#>);
	    }
<#      }#>
    }
}