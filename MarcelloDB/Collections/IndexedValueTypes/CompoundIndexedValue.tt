<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System.Runtime.CompilerServices;
using System.Linq;
using System;
using System.Collections.Generic;
using MarcelloDB.Collections;
using MarcelloDB.Index;

namespace MarcelloDB.Collections
{
    <#
    int maxCompoundLength = 8;
    for (int i = 2; i<=maxCompoundLength; i++)
	{
		var genericAttributes = new List<string>();
		var paramsDeclarations = new List<string>();
		var arguments = new List<string>();
		for (int j = 1; j<=i; j++)
		{
			genericAttributes.Add("TAtt" + j.ToString());
			paramsDeclarations.Add("TAtt" + j.ToString() + " val" + j.ToString());
			arguments.Add("val" + j.ToString());
		}

		var genericAttributeList = string.Join(", ", genericAttributes);
		var paramsDeclarationList = string.Join(", ", paramsDeclarations);
		var argumentsList = string.Join(", ", arguments);
		#>

	public class CompoundIndexedValue<TObj, <#=genericAttributeList#>> : BaseIndexedValue<TObj, CompoundValue<<#=genericAttributeList#>>>
    {
        CompoundIndexedValue(): base(null){
        }

        internal CompoundIndexedValue(Func<TObj, CompoundValue<<#=genericAttributeList#>>> valueFunction)
            :base(valueFunction){}

        public IEnumerable<TObj> Find(<#=paramsDeclarationList#>)
        {
            return base.FindInternal(CompoundValue.Build(<#=argumentsList#>));
        }

        public IEnumerable<TObj> GreaterThan(<#=paramsDeclarationList#>)
        {
            return base.GreaterThanInternal(CompoundValue.Build(<#=argumentsList#>));
        }
    }

	<#}#>

}